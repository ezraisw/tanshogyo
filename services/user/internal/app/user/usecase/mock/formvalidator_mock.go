// Code generated by MockGen. DO NOT EDIT.
// Source: formvalidator.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/pwnedgod/tanshogyo/services/user/internal/app/user/usecase"
)

// MockUserFormValidator is a mock of UserFormValidator interface.
type MockUserFormValidator struct {
	ctrl     *gomock.Controller
	recorder *MockUserFormValidatorMockRecorder
}

// MockUserFormValidatorMockRecorder is the mock recorder for MockUserFormValidator.
type MockUserFormValidatorMockRecorder struct {
	mock *MockUserFormValidator
}

// NewMockUserFormValidator creates a new mock instance.
func NewMockUserFormValidator(ctrl *gomock.Controller) *MockUserFormValidator {
	mock := &MockUserFormValidator{ctrl: ctrl}
	mock.recorder = &MockUserFormValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFormValidator) EXPECT() *MockUserFormValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockUserFormValidator) Validate(ctx context.Context, form usecase.UserForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockUserFormValidatorMockRecorder) Validate(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUserFormValidator)(nil).Validate), ctx, form)
}
