// Code generated by MockGen. DO NOT EDIT.
// Source: registerer.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/ezraisw/tanshogyo/services/user/internal/app/user/usecase"
)

// MockUserRegisterer is a mock of UserRegisterer interface.
type MockUserRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistererMockRecorder
}

// MockUserRegistererMockRecorder is the mock recorder for MockUserRegisterer.
type MockUserRegistererMockRecorder struct {
	mock *MockUserRegisterer
}

// NewMockUserRegisterer creates a new mock instance.
func NewMockUserRegisterer(ctrl *gomock.Controller) *MockUserRegisterer {
	mock := &MockUserRegisterer{ctrl: ctrl}
	mock.recorder = &MockUserRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRegisterer) EXPECT() *MockUserRegistererMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserRegisterer) Register(ctx context.Context, form usecase.UserForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserRegistererMockRecorder) Register(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRegisterer)(nil).Register), ctx, form)
}
