// Code generated by MockGen. DO NOT EDIT.
// Source: uniquechecker.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/ezraisw/tanshogyo/services/user/internal/app/user/usecase"
)

// MockUserUniqueChecker is a mock of UserUniqueChecker interface.
type MockUserUniqueChecker struct {
	ctrl     *gomock.Controller
	recorder *MockUserUniqueCheckerMockRecorder
}

// MockUserUniqueCheckerMockRecorder is the mock recorder for MockUserUniqueChecker.
type MockUserUniqueCheckerMockRecorder struct {
	mock *MockUserUniqueChecker
}

// NewMockUserUniqueChecker creates a new mock instance.
func NewMockUserUniqueChecker(ctrl *gomock.Controller) *MockUserUniqueChecker {
	mock := &MockUserUniqueChecker{ctrl: ctrl}
	mock.recorder = &MockUserUniqueCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUniqueChecker) EXPECT() *MockUserUniqueCheckerMockRecorder {
	return m.recorder
}

// CheckUnique mocks base method.
func (m *MockUserUniqueChecker) CheckUnique(ctx context.Context, excludedId string, fields []usecase.Field) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnique", ctx, excludedId, fields)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUnique indicates an expected call of CheckUnique.
func (mr *MockUserUniqueCheckerMockRecorder) CheckUnique(ctx, excludedId, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnique", reflect.TypeOf((*MockUserUniqueChecker)(nil).CheckUnique), ctx, excludedId, fields)
}
