// Code generated by MockGen. DO NOT EDIT.
// Source: loginer.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/pwnedgod/tanshogyo/services/user/internal/app/user/usecase"
)

// MockUserLoginer is a mock of UserLoginer interface.
type MockUserLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockUserLoginerMockRecorder
}

// MockUserLoginerMockRecorder is the mock recorder for MockUserLoginer.
type MockUserLoginerMockRecorder struct {
	mock *MockUserLoginer
}

// NewMockUserLoginer creates a new mock instance.
func NewMockUserLoginer(ctrl *gomock.Controller) *MockUserLoginer {
	mock := &MockUserLoginer{ctrl: ctrl}
	mock.recorder = &MockUserLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLoginer) EXPECT() *MockUserLoginerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserLoginer) Login(ctx context.Context, form usecase.LoginForm) (usecase.AuthenticationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, form)
	ret0, _ := ret[0].(usecase.AuthenticationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserLoginerMockRecorder) Login(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserLoginer)(nil).Login), ctx, form)
}
