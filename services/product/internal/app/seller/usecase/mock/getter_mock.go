// Code generated by MockGen. DO NOT EDIT.
// Source: getter.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/pwnedgod/tanshogyo/services/product/internal/app/seller/usecase"
)

// MockSellerGetter is a mock of SellerGetter interface.
type MockSellerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSellerGetterMockRecorder
}

// MockSellerGetterMockRecorder is the mock recorder for MockSellerGetter.
type MockSellerGetterMockRecorder struct {
	mock *MockSellerGetter
}

// NewMockSellerGetter creates a new mock instance.
func NewMockSellerGetter(ctrl *gomock.Controller) *MockSellerGetter {
	mock := &MockSellerGetter{ctrl: ctrl}
	mock.recorder = &MockSellerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellerGetter) EXPECT() *MockSellerGetterMockRecorder {
	return m.recorder
}

// GetByUserID mocks base method.
func (m *MockSellerGetter) GetByUserID(ctx context.Context, userId string) (usecase.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userId)
	ret0, _ := ret[0].(usecase.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSellerGetterMockRecorder) GetByUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSellerGetter)(nil).GetByUserID), ctx, userId)
}
