// Code generated by MockGen. DO NOT EDIT.
// Source: formvalidator.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/pwnedgod/tanshogyo/services/product/internal/app/seller/usecase"
)

// MockSellerFormValidator is a mock of SellerFormValidator interface.
type MockSellerFormValidator struct {
	ctrl     *gomock.Controller
	recorder *MockSellerFormValidatorMockRecorder
}

// MockSellerFormValidatorMockRecorder is the mock recorder for MockSellerFormValidator.
type MockSellerFormValidatorMockRecorder struct {
	mock *MockSellerFormValidator
}

// NewMockSellerFormValidator creates a new mock instance.
func NewMockSellerFormValidator(ctrl *gomock.Controller) *MockSellerFormValidator {
	mock := &MockSellerFormValidator{ctrl: ctrl}
	mock.recorder = &MockSellerFormValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellerFormValidator) EXPECT() *MockSellerFormValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockSellerFormValidator) Validate(ctx context.Context, form usecase.SellerForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSellerFormValidatorMockRecorder) Validate(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSellerFormValidator)(nil).Validate), ctx, form)
}
