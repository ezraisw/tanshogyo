// Code generated by MockGen. DO NOT EDIT.
// Source: existsrule.go

// Package factorymock is a generated GoMock package.
package factorymock

import (
	reflect "reflect"

	validation "github.com/go-ozzo/ozzo-validation/v4"
	gomock "github.com/golang/mock/gomock"
	factory "github.com/ezraisw/tanshogyo/services/product/internal/app/seller/factory"
)

// MockSellerExistsRuleFactory is a mock of SellerExistsRuleFactory interface.
type MockSellerExistsRuleFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSellerExistsRuleFactoryMockRecorder
}

// MockSellerExistsRuleFactoryMockRecorder is the mock recorder for MockSellerExistsRuleFactory.
type MockSellerExistsRuleFactoryMockRecorder struct {
	mock *MockSellerExistsRuleFactory
}

// NewMockSellerExistsRuleFactory creates a new mock instance.
func NewMockSellerExistsRuleFactory(ctrl *gomock.Controller) *MockSellerExistsRuleFactory {
	mock := &MockSellerExistsRuleFactory{ctrl: ctrl}
	mock.recorder = &MockSellerExistsRuleFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellerExistsRuleFactory) EXPECT() *MockSellerExistsRuleFactoryMockRecorder {
	return m.recorder
}

// Make mocks base method.
func (m *MockSellerExistsRuleFactory) Make(fieldName string, otherFields ...factory.Field) validation.Rule {
	m.ctrl.T.Helper()
	varargs := []interface{}{fieldName}
	for _, a := range otherFields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Make", varargs...)
	ret0, _ := ret[0].(validation.Rule)
	return ret0
}

// Make indicates an expected call of Make.
func (mr *MockSellerExistsRuleFactoryMockRecorder) Make(fieldName interface{}, otherFields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fieldName}, otherFields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockSellerExistsRuleFactory)(nil).Make), varargs...)
}
