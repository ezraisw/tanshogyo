// Code generated by MockGen. DO NOT EDIT.
// Source: getter.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/pwnedgod/tanshogyo/services/product/internal/app/product/usecase"
)

// MockProductGetter is a mock of ProductGetter interface.
type MockProductGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProductGetterMockRecorder
}

// MockProductGetterMockRecorder is the mock recorder for MockProductGetter.
type MockProductGetterMockRecorder struct {
	mock *MockProductGetter
}

// NewMockProductGetter creates a new mock instance.
func NewMockProductGetter(ctrl *gomock.Controller) *MockProductGetter {
	mock := &MockProductGetter{ctrl: ctrl}
	mock.recorder = &MockProductGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductGetter) EXPECT() *MockProductGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProductGetter) Get(ctx context.Context, id string) (usecase.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(usecase.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductGetterMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductGetter)(nil).Get), ctx, id)
}
