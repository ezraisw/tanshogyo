// Code generated by MockGen. DO NOT EDIT.
// Source: autheddeleter.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductAuthedDeleter is a mock of ProductAuthedDeleter interface.
type MockProductAuthedDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProductAuthedDeleterMockRecorder
}

// MockProductAuthedDeleterMockRecorder is the mock recorder for MockProductAuthedDeleter.
type MockProductAuthedDeleterMockRecorder struct {
	mock *MockProductAuthedDeleter
}

// NewMockProductAuthedDeleter creates a new mock instance.
func NewMockProductAuthedDeleter(ctrl *gomock.Controller) *MockProductAuthedDeleter {
	mock := &MockProductAuthedDeleter{ctrl: ctrl}
	mock.recorder = &MockProductAuthedDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductAuthedDeleter) EXPECT() *MockProductAuthedDeleterMockRecorder {
	return m.recorder
}

// AuthedDelete mocks base method.
func (m *MockProductAuthedDeleter) AuthedDelete(ctx context.Context, userId, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthedDelete", ctx, userId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthedDelete indicates an expected call of AuthedDelete.
func (mr *MockProductAuthedDeleterMockRecorder) AuthedDelete(ctx, userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthedDelete", reflect.TypeOf((*MockProductAuthedDeleter)(nil).AuthedDelete), ctx, userId, id)
}
