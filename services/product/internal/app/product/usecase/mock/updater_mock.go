// Code generated by MockGen. DO NOT EDIT.
// Source: updater.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/ezraisw/tanshogyo/services/product/internal/app/product/usecase"
)

// MockProductUpdater is a mock of ProductUpdater interface.
type MockProductUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProductUpdaterMockRecorder
}

// MockProductUpdaterMockRecorder is the mock recorder for MockProductUpdater.
type MockProductUpdaterMockRecorder struct {
	mock *MockProductUpdater
}

// NewMockProductUpdater creates a new mock instance.
func NewMockProductUpdater(ctrl *gomock.Controller) *MockProductUpdater {
	mock := &MockProductUpdater{ctrl: ctrl}
	mock.recorder = &MockProductUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUpdater) EXPECT() *MockProductUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockProductUpdater) Update(ctx context.Context, id string, form usecase.ProductForm) (usecase.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, form)
	ret0, _ := ret[0].(usecase.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductUpdaterMockRecorder) Update(ctx, id, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductUpdater)(nil).Update), ctx, id, form)
}
