// Code generated by MockGen. DO NOT EDIT.
// Source: creator.go

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/ezraisw/tanshogyo/services/product/internal/app/product/usecase"
)

// MockProductCreator is a mock of ProductCreator interface.
type MockProductCreator struct {
	ctrl     *gomock.Controller
	recorder *MockProductCreatorMockRecorder
}

// MockProductCreatorMockRecorder is the mock recorder for MockProductCreator.
type MockProductCreatorMockRecorder struct {
	mock *MockProductCreator
}

// NewMockProductCreator creates a new mock instance.
func NewMockProductCreator(ctrl *gomock.Controller) *MockProductCreator {
	mock := &MockProductCreator{ctrl: ctrl}
	mock.recorder = &MockProductCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductCreator) EXPECT() *MockProductCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductCreator) Create(ctx context.Context, form usecase.ProductForm) (usecase.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, form)
	ret0, _ := ret[0].(usecase.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductCreatorMockRecorder) Create(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductCreator)(nil).Create), ctx, form)
}
