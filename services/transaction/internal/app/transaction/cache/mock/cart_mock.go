// Code generated by MockGen. DO NOT EDIT.
// Source: cart.go

// Package cachemock is a generated GoMock package.
package cachemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/pwnedgod/tanshogyo/services/transaction/internal/app/transaction/cache"
)

// MockCartCache is a mock of CartCache interface.
type MockCartCache struct {
	ctrl     *gomock.Controller
	recorder *MockCartCacheMockRecorder
}

// MockCartCacheMockRecorder is the mock recorder for MockCartCache.
type MockCartCacheMockRecorder struct {
	mock *MockCartCache
}

// NewMockCartCache creates a new mock instance.
func NewMockCartCache(ctrl *gomock.Controller) *MockCartCache {
	mock := &MockCartCache{ctrl: ctrl}
	mock.recorder = &MockCartCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartCache) EXPECT() *MockCartCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCartCache) Delete(ctx context.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCartCacheMockRecorder) Delete(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCartCache)(nil).Delete), ctx, userId)
}

// Get mocks base method.
func (m *MockCartCache) Get(ctx context.Context, userId string) (cache.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userId)
	ret0, _ := ret[0].(cache.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCartCacheMockRecorder) Get(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCartCache)(nil).Get), ctx, userId)
}

// Set mocks base method.
func (m *MockCartCache) Set(ctx context.Context, userId string, cart cache.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, userId, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCartCacheMockRecorder) Set(ctx, userId, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCartCache)(nil).Set), ctx, userId, cart)
}
