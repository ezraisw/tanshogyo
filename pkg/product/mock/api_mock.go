// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package userauthmock is a generated GoMock package.
package userauthmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/ezraisw/tanshogyo/pkg/product"
)

// MockProductAPI is a mock of ProductAPI interface.
type MockProductAPI struct {
	ctrl     *gomock.Controller
	recorder *MockProductAPIMockRecorder
}

// MockProductAPIMockRecorder is the mock recorder for MockProductAPI.
type MockProductAPIMockRecorder struct {
	mock *MockProductAPI
}

// NewMockProductAPI creates a new mock instance.
func NewMockProductAPI(ctrl *gomock.Controller) *MockProductAPI {
	mock := &MockProductAPI{ctrl: ctrl}
	mock.recorder = &MockProductAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductAPI) EXPECT() *MockProductAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProductAPI) Get(ctx context.Context, id string) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductAPIMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductAPI)(nil).Get), ctx, id)
}

// UpdateQuantity mocks base method.
func (m *MockProductAPI) UpdateQuantity(ctx context.Context, id string, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", ctx, id, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockProductAPIMockRecorder) UpdateQuantity(ctx, id, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockProductAPI)(nil).UpdateQuantity), ctx, id, quantity)
}
